<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Oct 2022 11:44:25 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>The Postgres Heap file | 2 TOASTing</title><link>/posts/postgres_heapfile2/</link><pubDate>Sun, 23 Oct 2022 11:44:25 +0200</pubDate><guid>/posts/postgres_heapfile2/</guid><description>Postgres uses a technique called TOAST (The Oversized-Attribute Storage Technique) to deal with tuples that can&amp;rsquo;t fit in a page. Essentially TOASTing allows individual elements in a tuple to be compressed and/or stored &amp;ldquo;out of line&amp;rdquo; in another table called the relation&amp;rsquo;s TOAST table. The process of compressing or storing out of line is called TOASTing, while the reverse is called de-TOASTing (duh).
Only variable length data types can be TOASTed.</description></item><item><title>The Postgres Heap file | 1</title><link>/posts/postgres_heapfile/</link><pubDate>Wed, 12 Oct 2022 11:44:25 +0200</pubDate><guid>/posts/postgres_heapfile/</guid><description>Postgres stores relations in a single, unorganized file called a heap file. This format puts it at odds with other OLTP systems, which tend to store relations in an on-disk data structure organized by some high level constraint. For example, MySQL (InnoDB) stores relations in a B+ tree where the search key is the primary key.
The atomic unit of disk access is an 8KB page. Each page has the following structure:</description></item></channel></rss>